{"version":3,"file":"dice-roller-react.umd.js","sources":["../node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-runtime.development.js","../node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-runtime.js","../src/lib/constants/index.ts","../src/lib/components/DiceRoller/PhysicsControls.tsx","../node_modules/.pnpm/three-stdlib@2.36.0_three@0.177.0/node_modules/three-stdlib/controls/EventDispatcher.js","../node_modules/.pnpm/three-stdlib@2.36.0_three@0.177.0/node_modules/three-stdlib/controls/OrbitControls.js","../node_modules/.pnpm/three-stdlib@2.36.0_three@0.177.0/node_modules/three-stdlib/geometries/RoundedBoxGeometry.js","../src/lib/components/DiceRoller/utils/geometries/d6.ts","../src/lib/components/DiceRoller/utils/geometries/d8.ts","../src/lib/components/DiceRoller/utils/geometries/d20.ts","../src/lib/components/DiceRoller/utils/d20FaceDetection.ts","../src/lib/components/DiceRoller/utils/physicsSetup.ts","../src/lib/components/DiceRoller/utils/predeterminedResults.ts","../src/lib/components/DiceRoller/utils/faceDetection.ts","../src/lib/components/DiceRoller/utils/sceneSetup.ts","../src/lib/components/DiceRoller/utils/materialShifting.ts","../src/lib/components/DiceRoller/DiceRoller.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\"production\" !== process.env.NODE_ENV &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = require(\"react\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      \"react-stack-bottom-frame\": function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsx = function (type, config, maybeKey, source, self) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        !1,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n    exports.jsxs = function (type, config, maybeKey, source, self) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        !0,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * Central constants and configuration for the Dice Roller\n */\n\nimport type { DiceConfigs, PhysicsParams } from '../types';\n\n// ==================== Scene Constants ====================\n\nexport const SCENE_CONFIG = {\n  backgroundColor: 0xf0f0f0,\n  cameraFov: 45,\n  cameraNear: 0.1,\n  cameraFar: 100,\n  cameraPosition: [0, 5, 10] as [number, number, number],\n  cameraLookAt: [0, 0, 0] as [number, number, number],\n} as const;\n\nexport const LIGHTING_CONFIG = {\n  ambientIntensity: 0.8,  // Increased from 0.6\n  directionalIntensity: 0.8,  // Increased from 0.5\n  directionalPosition: [10, 10, 5] as [number, number, number],\n  shadowMapSize: 1024,\n} as const;\n\nexport const TABLE_CONFIG = {\n  size: 5,\n  groundSize: 1000,  // Very large ground for overlay effect\n  groundY: -2,\n  wallHeight: 2,\n  wallThickness: 0.1,\n  wallOpacity: 0.3,\n  wallColor: 0x303030,\n  groundColor: 0x808080,\n} as const;\n\nexport const CONTROLS_CONFIG = {\n  enablePan: false,\n  minDistance: 5,\n  maxDistance: 20,\n  target: [0, 0, 0] as [number, number, number],\n} as const;\n\n// ==================== Physics Constants ====================\n\nexport const DEFAULT_PHYSICS: PhysicsParams = {\n  gravity: 50,              // 5x Earth gravity for snappier dice\n  diceFriction: 0.3,        // Moderate friction for realistic rolling\n  diceRestitution: 0.3,     // Moderate bounce\n  groundFriction: 0.3,      // Table friction\n  groundRestitution: 0.1,   // Low table bounce\n  wallFriction: 0,          // No wall friction\n  wallRestitution: 1.0,     // Perfect wall bounce\n  linearDamping: 0.4,       // Movement damping\n  angularDamping: 0.4,      // Rotation damping\n};\n\nexport const PHYSICS_LIMITS = {\n  gravity: { min: 10, max: 100, step: 5 },\n  diceRestitution: { min: 0, max: 0.8, step: 0.05 },\n  groundFriction: { min: 0.1, max: 1, step: 0.05 },\n  diceFriction: { min: 0.1, max: 1, step: 0.05 },\n  angularDamping: { min: 0, max: 0.8, step: 0.05 },\n} as const;\n\nexport const PHYSICS_SIM_CONFIG = {\n  timeStep: 1 / 60,\n  maxSimSteps: 500,\n  stoppedFramesRequired: 10,\n  linearThreshold: 0.1,      // Velocity threshold for stopped detection\n  linearThresholdD20: 0.05,  // Stricter for D20\n  angularThreshold: 0.1,     // Angular velocity threshold\n  angularThresholdD20: 0.05, // Stricter for D20\n} as const;\n\n// ==================== Dice Constants ====================\n\nexport const DICE_CONFIGS: DiceConfigs = {\n  d6: {\n    defaultSize: 1,\n    faces: 6,\n    defaultMapping: [1, 6, 2, 5, 3, 4], // Opposite faces sum to 7\n    textureSize: 256,\n    textureMargin: 20,\n  },\n  d8: {\n    defaultSize: 1,\n    faces: 8,\n    defaultMapping: [1, 2, 3, 4, 5, 6, 7, 8], // Direct mapping, opposite faces sum to 9\n    textureSize: 256,\n    textureMargin: 20,\n  },\n  d20: {\n    defaultSize: 1,\n    faces: 20,\n    defaultMapping: Array.from({ length: 20 }, (_, i) => i + 1),\n  },\n};\n\n// ==================== Throw Constants ====================\n\nexport const THROW_CONFIG = {\n  defaultForce: 1,\n  minForce: 0.5,\n  maxForce: 2,\n  forceStep: 0.1,\n  startHeight: 2,\n  startPosition: [0, 2, 0] as [number, number, number],\n  velocityScale: 5,\n  angularVelocityScale: 20,\n} as const;\n\n// ==================== Material Constants ====================\n\nexport const MATERIAL_CONFIG = {\n  dieColor: 0x303030,         // Dark gray die\n  numberColor: '#e0e0e0',     // Light gray numbers\n  fontSize: 120,\n  fontFamily: 'Arial',\n  chamferRadius: 0.04,        // 4% rounding for d6\n  chamferSegments: 7,\n} as const;\n\n// ==================== UI Constants ====================\n\nexport const UI_CONFIG = {\n  controlsBackground: '#f0f0f0',\n  controlsText: '#333',\n  controlsHeading: '#222',\n  controlsSubheading: '#444',\n  buttonPrimary: '#007bff',\n  buttonHover: '#0056b3',\n  inputBackground: '#f0f0f0',\n  inputBorder: '#ccc',\n  monospaceBg: '#f0f0f0',\n  sliderWidth: '120px',\n  sliderHeight: '150px',\n} as const;\n\n// ==================== Animation Constants ====================\n\nexport const ANIMATION_CONFIG = {\n  renderFPS: 60,\n  fallOffTableThreshold: 5,  // Distance from center before reset\n  fallThroughFloorY: -5,     // Y position that triggers reset\n  resultDelay: 100,          // ms delay before showing result\n} as const;\n\n// ==================== Error Messages ====================\n\nexport const ERROR_MESSAGES = {\n  physicsWhileRolling: 'Please wait for the die to stop rolling before changing physics parameters.',\n  invalidDieType: 'Invalid die type specified',\n  invalidResult: 'Invalid predetermined result value',\n} as const;","import styles from './DiceRoller.module.css';\nimport type { PhysicsParams, PhysicsControlsProps } from '../../types';\nimport { DEFAULT_PHYSICS, PHYSICS_LIMITS, UI_CONFIG } from '../../constants';\n\n\nconst PhysicsControls: React.FC<PhysicsControlsProps> = ({ params, onChange }) => {\n  const handleChange = (key: keyof PhysicsParams, value: number) => {\n    // When changing visible params, preserve the hidden ones with sensible defaults\n    const updatedParams = {\n      ...params,\n      [key]: value,\n      // Ensure hidden params maintain reasonable values\n      groundRestitution: 0.1,  // Low bounce for table\n      wallFriction: 0,         // No friction on walls\n      wallRestitution: 1.0,    // Perfect bounce off walls\n      linearDamping: params.angularDamping, // Match angular damping\n    };\n    onChange(updatedParams);\n  };\n\n  const renderSlider = (\n    label: string,\n    key: keyof PhysicsParams,\n    min: number,\n    max: number,\n    step: number = 0.01,\n    unit: string = ''\n  ) => (\n    <div className={styles.sliderControl} style={{ marginBottom: '10px' }}>\n      <label style={{ color: UI_CONFIG.controlsText, display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\n        <span style={{ minWidth: '120px', fontWeight: 'bold' }}>{label}:</span>\n        <input\n          type=\"range\"\n          min={min}\n          max={max}\n          step={step}\n          value={params[key]}\n          onChange={(e) => handleChange(key, parseFloat(e.target.value))}\n          style={{ width: '120px', margin: '0 10px' }}\n        />\n        <span style={{ \n          minWidth: '60px', \n          backgroundColor: UI_CONFIG.monospaceBg, \n          padding: '2px 8px', \n          borderRadius: '4px',\n          fontFamily: 'monospace'\n        }}>\n          {params[key].toFixed(step < 1 ? 2 : 0)}{unit}\n        </span>\n      </label>\n    </div>\n  );\n\n  return (\n    <div className={styles.physicsControls} style={{ color: UI_CONFIG.controlsText }}>\n      <h3 style={{ color: UI_CONFIG.controlsHeading, marginBottom: '15px' }}>Physics Settings</h3>\n      \n      <div style={{ marginBottom: '20px' }}>\n        <button\n          onClick={() => onChange(DEFAULT_PHYSICS)}\n          style={{\n            padding: '8px 20px',\n            backgroundColor: UI_CONFIG.buttonPrimary,\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '14px',\n            fontWeight: 'bold'\n          }}\n        >\n          Reset to Defaults\n        </button>\n      </div>\n\n      <div className={styles.physicsSection}>\n        <h4 style={{ color: UI_CONFIG.controlsSubheading, marginBottom: '10px' }}>Dice Behavior</h4>\n        {renderSlider('Gravity', 'gravity', PHYSICS_LIMITS.gravity.min, PHYSICS_LIMITS.gravity.max, PHYSICS_LIMITS.gravity.step, ' m/s²')}\n        {renderSlider('Bounciness', 'diceRestitution', PHYSICS_LIMITS.diceRestitution.min, PHYSICS_LIMITS.diceRestitution.max, PHYSICS_LIMITS.diceRestitution.step)}\n        {renderSlider('Table Friction', 'groundFriction', PHYSICS_LIMITS.groundFriction.min, PHYSICS_LIMITS.groundFriction.max, PHYSICS_LIMITS.groundFriction.step)}\n      </div>\n\n      <div className={styles.physicsSection}>\n        <h4 style={{ color: UI_CONFIG.controlsSubheading, marginBottom: '10px' }}>Advanced</h4>\n        {renderSlider('Dice Friction', 'diceFriction', PHYSICS_LIMITS.diceFriction.min, PHYSICS_LIMITS.diceFriction.max, PHYSICS_LIMITS.diceFriction.step)}\n        {renderSlider('Spin Damping', 'angularDamping', PHYSICS_LIMITS.angularDamping.min, PHYSICS_LIMITS.angularDamping.max, PHYSICS_LIMITS.angularDamping.step)}\n      </div>\n\n      {/* Hidden parameters that are still part of the physics but not user-adjustable */}\n      <input type=\"hidden\" value={params.groundRestitution} />\n      <input type=\"hidden\" value={params.wallFriction} />\n      <input type=\"hidden\" value={params.wallRestitution} />\n      <input type=\"hidden\" value={params.linearDamping} />\n    </div>\n  );\n};\n\nexport default PhysicsControls;","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass EventDispatcher {\n  constructor() {\n    // not defined in @types/three\n    __publicField(this, \"_listeners\");\n  }\n  /**\n   * Adds a listener to an event type.\n   * @param type The type of event to listen to.\n   * @param listener The function that gets called when the event is fired.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === void 0)\n      this._listeners = {};\n    const listeners = this._listeners;\n    if (listeners[type] === void 0) {\n      listeners[type] = [];\n    }\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  }\n  /**\n      * Checks if listener is added to an event type.\n      * @param type The type of event to listen to.\n      * @param listener The function that gets called when the event is fired.\n      */\n  hasEventListener(type, listener) {\n    if (this._listeners === void 0)\n      return false;\n    const listeners = this._listeners;\n    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;\n  }\n  /**\n      * Removes a listener from an event type.\n      * @param type The type of the listener that gets removed.\n      * @param listener The listener function that gets removed.\n      */\n  removeEventListener(type, listener) {\n    if (this._listeners === void 0)\n      return;\n    const listeners = this._listeners;\n    const listenerArray = listeners[type];\n    if (listenerArray !== void 0) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n  /**\n      * Fire an event type.\n      * @param event The event that gets fired.\n      */\n  dispatchEvent(event) {\n    if (this._listeners === void 0)\n      return;\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n    if (listenerArray !== void 0) {\n      event.target = this;\n      const array = listenerArray.slice(0);\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n      event.target = null;\n    }\n  }\n}\nexport {\n  EventDispatcher\n};\n//# sourceMappingURL=EventDispatcher.js.map\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, MOUSE, TOUCH, Quaternion, PerspectiveCamera, OrthographicCamera, Spherical, Vector2, Ray, Plane } from \"three\";\nimport { EventDispatcher } from \"./EventDispatcher.js\";\nconst _ray = /* @__PURE__ */ new Ray();\nconst _plane = /* @__PURE__ */ new Plane();\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180));\nconst moduloWrapAround = (offset, capacity) => (offset % capacity + capacity) % capacity;\nclass OrbitControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"domElement\");\n    // Set to false to disable this control\n    __publicField(this, \"enabled\", true);\n    // \"target\" sets the location of focus, where the object orbits around\n    __publicField(this, \"target\", new Vector3());\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    __publicField(this, \"minDistance\", 0);\n    __publicField(this, \"maxDistance\", Infinity);\n    // How far you can zoom in and out ( OrthographicCamera only )\n    __publicField(this, \"minZoom\", 0);\n    __publicField(this, \"maxZoom\", Infinity);\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    __publicField(this, \"minPolarAngle\", 0);\n    // radians\n    __publicField(this, \"maxPolarAngle\", Math.PI);\n    // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n    __publicField(this, \"minAzimuthAngle\", -Infinity);\n    // radians\n    __publicField(this, \"maxAzimuthAngle\", Infinity);\n    // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    __publicField(this, \"enableDamping\", false);\n    __publicField(this, \"dampingFactor\", 0.05);\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    __publicField(this, \"enableZoom\", true);\n    __publicField(this, \"zoomSpeed\", 1);\n    // Set to false to disable rotating\n    __publicField(this, \"enableRotate\", true);\n    __publicField(this, \"rotateSpeed\", 1);\n    // Set to false to disable panning\n    __publicField(this, \"enablePan\", true);\n    __publicField(this, \"panSpeed\", 1);\n    __publicField(this, \"screenSpacePanning\", true);\n    // if false, pan orthogonal to world-space direction camera.up\n    __publicField(this, \"keyPanSpeed\", 7);\n    // pixels moved per arrow key push\n    __publicField(this, \"zoomToCursor\", false);\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    __publicField(this, \"autoRotate\", false);\n    __publicField(this, \"autoRotateSpeed\", 2);\n    // 30 seconds per orbit when fps is 60\n    __publicField(this, \"reverseOrbit\", false);\n    // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n    __publicField(this, \"reverseHorizontalOrbit\", false);\n    // true if you want to reverse the horizontal orbit direction\n    __publicField(this, \"reverseVerticalOrbit\", false);\n    // true if you want to reverse the vertical orbit direction\n    // The four arrow keys\n    __publicField(this, \"keys\", { LEFT: \"ArrowLeft\", UP: \"ArrowUp\", RIGHT: \"ArrowRight\", BOTTOM: \"ArrowDown\" });\n    // Mouse buttons\n    __publicField(this, \"mouseButtons\", {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    });\n    // Touch fingers\n    __publicField(this, \"touches\", { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN });\n    __publicField(this, \"target0\");\n    __publicField(this, \"position0\");\n    __publicField(this, \"zoom0\");\n    // the target DOM element for key events\n    __publicField(this, \"_domElementKeyEvents\", null);\n    __publicField(this, \"getPolarAngle\");\n    __publicField(this, \"getAzimuthalAngle\");\n    __publicField(this, \"setPolarAngle\");\n    __publicField(this, \"setAzimuthalAngle\");\n    __publicField(this, \"getDistance\");\n    // Not used in most scenarios, however they can be useful for specific use cases\n    __publicField(this, \"getZoomScale\");\n    __publicField(this, \"listenToKeyEvents\");\n    __publicField(this, \"stopListenToKeyEvents\");\n    __publicField(this, \"saveState\");\n    __publicField(this, \"reset\");\n    __publicField(this, \"update\");\n    __publicField(this, \"connect\");\n    __publicField(this, \"dispose\");\n    // Dolly in programmatically\n    __publicField(this, \"dollyIn\");\n    // Dolly out programmatically\n    __publicField(this, \"dollyOut\");\n    // Get the current scale\n    __publicField(this, \"getScale\");\n    // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n    __publicField(this, \"setScale\");\n    this.object = object;\n    this.domElement = domElement;\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n    this.getPolarAngle = () => spherical.phi;\n    this.getAzimuthalAngle = () => spherical.theta;\n    this.setPolarAngle = (value) => {\n      let phi = moduloWrapAround(value, 2 * Math.PI);\n      let currentPhi = spherical.phi;\n      if (currentPhi < 0)\n        currentPhi += 2 * Math.PI;\n      if (phi < 0)\n        phi += 2 * Math.PI;\n      let phiDist = Math.abs(phi - currentPhi);\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI;\n        } else {\n          currentPhi += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi;\n      scope.update();\n    };\n    this.setAzimuthalAngle = (value) => {\n      let theta = moduloWrapAround(value, 2 * Math.PI);\n      let currentTheta = spherical.theta;\n      if (currentTheta < 0)\n        currentTheta += 2 * Math.PI;\n      if (theta < 0)\n        theta += 2 * Math.PI;\n      let thetaDist = Math.abs(theta - currentTheta);\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI;\n        } else {\n          currentTheta += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta;\n      scope.update();\n    };\n    this.getDistance = () => scope.object.position.distanceTo(scope.target);\n    this.listenToKeyEvents = (domElement2) => {\n      domElement2.addEventListener(\"keydown\", onKeyDown);\n      this._domElementKeyEvents = domElement2;\n    };\n    this.stopListenToKeyEvents = () => {\n      this._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      this._domElementKeyEvents = null;\n    };\n    this.saveState = () => {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n    this.reset = () => {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(changeEvent);\n      scope.update();\n      state = STATE.NONE;\n    };\n    this.update = (() => {\n      const offset = new Vector3();\n      const up = new Vector3(0, 1, 0);\n      const quat = new Quaternion().setFromUnitVectors(object.up, up);\n      const quatInverse = quat.clone().invert();\n      const lastPosition = new Vector3();\n      const lastQuaternion = new Quaternion();\n      const twoPI = 2 * Math.PI;\n      return function update() {\n        const position = scope.object.position;\n        quat.setFromUnitVectors(object.up, up);\n        quatInverse.copy(quat).invert();\n        offset.copy(position).sub(scope.target);\n        offset.applyQuaternion(quat);\n        spherical.setFromVector3(offset);\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n        let min = scope.minAzimuthAngle;\n        let max = scope.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI)\n            min += twoPI;\n          else if (min > Math.PI)\n            min -= twoPI;\n          if (max < -Math.PI)\n            max += twoPI;\n          else if (max > Math.PI)\n            max -= twoPI;\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n          }\n        }\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n        spherical.makeSafe();\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n        if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n        offset.setFromSpherical(spherical);\n        offset.applyQuaternion(quatInverse);\n        position.copy(scope.target).add(offset);\n        if (!scope.object.matrixAutoUpdate)\n          scope.object.updateMatrix();\n        scope.object.lookAt(scope.target);\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n          panOffset.set(0, 0, 0);\n        }\n        let zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null;\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            const prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n            const radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n            newRadius = offset.length();\n          } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n            scope.zoomToCursor = false;\n          }\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);\n            } else {\n              _ray.origin.copy(scope.object.position);\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1;\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n          }\n        }\n        scale = 1;\n        performCursorZoom = false;\n        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          scope.dispatchEvent(changeEvent);\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          zoomChanged = false;\n          return true;\n        }\n        return false;\n      };\n    })();\n    this.connect = (domElement2) => {\n      scope.domElement = domElement2;\n      scope.domElement.style.touchAction = \"none\";\n      scope.domElement.addEventListener(\"contextmenu\", onContextMenu);\n      scope.domElement.addEventListener(\"pointerdown\", onPointerDown);\n      scope.domElement.addEventListener(\"pointercancel\", onPointerUp);\n      scope.domElement.addEventListener(\"wheel\", onMouseWheel);\n    };\n    this.dispose = () => {\n      var _a, _b, _c, _d, _e, _f;\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = \"auto\";\n      }\n      (_a = scope.domElement) == null ? void 0 : _a.removeEventListener(\"contextmenu\", onContextMenu);\n      (_b = scope.domElement) == null ? void 0 : _b.removeEventListener(\"pointerdown\", onPointerDown);\n      (_c = scope.domElement) == null ? void 0 : _c.removeEventListener(\"pointercancel\", onPointerUp);\n      (_d = scope.domElement) == null ? void 0 : _d.removeEventListener(\"wheel\", onMouseWheel);\n      (_e = scope.domElement) == null ? void 0 : _e.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n      (_f = scope.domElement) == null ? void 0 : _f.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      }\n    };\n    const scope = this;\n    const changeEvent = { type: \"change\" };\n    const startEvent = { type: \"start\" };\n    const endEvent = { type: \"end\" };\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6\n    };\n    let state = STATE.NONE;\n    const EPS = 1e-6;\n    const spherical = new Spherical();\n    const sphericalDelta = new Spherical();\n    let scale = 1;\n    const panOffset = new Vector3();\n    const rotateStart = new Vector2();\n    const rotateEnd = new Vector2();\n    const rotateDelta = new Vector2();\n    const panStart = new Vector2();\n    const panEnd = new Vector2();\n    const panDelta = new Vector2();\n    const dollyStart = new Vector2();\n    const dollyEnd = new Vector2();\n    const dollyDelta = new Vector2();\n    const dollyDirection = new Vector3();\n    const mouse = new Vector2();\n    let performCursorZoom = false;\n    const pointers = [];\n    const pointerPositions = {};\n    function getAutoRotationAngle() {\n      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n    function rotateLeft(angle) {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle;\n      } else {\n        sphericalDelta.theta -= angle;\n      }\n    }\n    function rotateUp(angle) {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle;\n      } else {\n        sphericalDelta.phi -= angle;\n      }\n    }\n    const panLeft = (() => {\n      const v = new Vector3();\n      return function panLeft2(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0);\n        v.multiplyScalar(-distance);\n        panOffset.add(v);\n      };\n    })();\n    const panUp = (() => {\n      const v = new Vector3();\n      return function panUp2(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n        v.multiplyScalar(distance);\n        panOffset.add(v);\n      };\n    })();\n    const pan = (() => {\n      const offset = new Vector3();\n      return function pan2(deltaX, deltaY) {\n        const element = scope.domElement;\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          let targetDistance = offset.length();\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\n          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          panLeft(\n            deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth,\n            scope.object.matrix\n          );\n          panUp(\n            deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight,\n            scope.object.matrix\n          );\n        } else {\n          console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n          scope.enablePan = false;\n        }\n      };\n    })();\n    function setScale(newScale) {\n      if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n        scale = newScale;\n      } else {\n        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        scope.enableZoom = false;\n      }\n    }\n    function dollyOut(dollyScale) {\n      setScale(scale / dollyScale);\n    }\n    function dollyIn(dollyScale) {\n      setScale(scale * dollyScale);\n    }\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return;\n      }\n      performCursorZoom = true;\n      const rect = scope.domElement.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const w = rect.width;\n      const h = rect.height;\n      mouse.x = x / w * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();\n    }\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      const element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n      scope.update();\n    }\n    function handleKeyDown(event) {\n      let needsUpdate = false;\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        event.preventDefault();\n        scope.update();\n      }\n    }\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        rotateStart.set(x, y);\n      }\n    }\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        panStart.set(x, y);\n      }\n    }\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX;\n      const dy = pointers[0].pageY - pointers[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom)\n        handleTouchStartDolly();\n      if (scope.enablePan)\n        handleTouchStartPan();\n    }\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom)\n        handleTouchStartDolly();\n      if (scope.enableRotate)\n        handleTouchStartRotate();\n    }\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n        rotateEnd.set(x, y);\n      }\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      const element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n    }\n    function handleTouchMovePan(event) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n        panEnd.set(x, y);\n      }\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n    }\n    function handleTouchMoveDolly(event) {\n      const position = getSecondPointerPosition(event);\n      const dx = event.pageX - position.x;\n      const dy = event.pageY - position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      dollyEnd.set(0, distance);\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n      dollyOut(dollyDelta.y);\n      dollyStart.copy(dollyEnd);\n    }\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom)\n        handleTouchMoveDolly(event);\n      if (scope.enablePan)\n        handleTouchMovePan(event);\n    }\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom)\n        handleTouchMoveDolly(event);\n      if (scope.enableRotate)\n        handleTouchMoveRotate(event);\n    }\n    function onPointerDown(event) {\n      var _a, _b;\n      if (scope.enabled === false)\n        return;\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.ownerDocument.addEventListener(\"pointermove\", onPointerMove);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.addEventListener(\"pointerup\", onPointerUp);\n      }\n      addPointer(event);\n      if (event.pointerType === \"touch\") {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n    function onPointerMove(event) {\n      if (scope.enabled === false)\n        return;\n      if (event.pointerType === \"touch\") {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n    function onPointerUp(event) {\n      var _a, _b, _c;\n      removePointer(event);\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.releasePointerCapture(event.pointerId);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n        (_c = scope.domElement) == null ? void 0 : _c.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      }\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n    function onMouseDown(event) {\n      let mouseAction;\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n        default:\n          mouseAction = -1;\n      }\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false)\n            return;\n          handleMouseDownDolly(event);\n          state = STATE.DOLLY;\n          break;\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false)\n              return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false)\n              return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          }\n          break;\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false)\n              return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false)\n              return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onMouseMove(event) {\n      if (scope.enabled === false)\n        return;\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false)\n            return;\n          handleMouseMoveRotate(event);\n          break;\n        case STATE.DOLLY:\n          if (scope.enableZoom === false)\n            return;\n          handleMouseMoveDolly(event);\n          break;\n        case STATE.PAN:\n          if (scope.enablePan === false)\n            return;\n          handleMouseMovePan(event);\n          break;\n      }\n    }\n    function onMouseWheel(event) {\n      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) {\n        return;\n      }\n      event.preventDefault();\n      scope.dispatchEvent(startEvent);\n      handleMouseWheel(event);\n      scope.dispatchEvent(endEvent);\n    }\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false)\n        return;\n      handleKeyDown(event);\n    }\n    function onTouchStart(event) {\n      trackPointer(event);\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false)\n                return;\n              handleTouchStartRotate();\n              state = STATE.TOUCH_ROTATE;\n              break;\n            case TOUCH.PAN:\n              if (scope.enablePan === false)\n                return;\n              handleTouchStartPan();\n              state = STATE.TOUCH_PAN;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false)\n                return;\n              handleTouchStartDollyPan();\n              state = STATE.TOUCH_DOLLY_PAN;\n              break;\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false)\n                return;\n              handleTouchStartDollyRotate();\n              state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onTouchMove(event) {\n      trackPointer(event);\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false)\n            return;\n          handleTouchMoveRotate(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false)\n            return;\n          handleTouchMovePan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false)\n            return;\n          handleTouchMoveDollyPan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false)\n            return;\n          handleTouchMoveDollyRotate(event);\n          scope.update();\n          break;\n        default:\n          state = STATE.NONE;\n      }\n    }\n    function onContextMenu(event) {\n      if (scope.enabled === false)\n        return;\n      event.preventDefault();\n    }\n    function addPointer(event) {\n      pointers.push(event);\n    }\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n    function trackPointer(event) {\n      let position = pointerPositions[event.pointerId];\n      if (position === void 0) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n      position.set(event.pageX, event.pageY);\n    }\n    function getSecondPointerPosition(event) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n      return pointerPositions[pointer.pointerId];\n    }\n    this.dollyIn = (dollyScale = getZoomScale()) => {\n      dollyIn(dollyScale);\n      scope.update();\n    };\n    this.dollyOut = (dollyScale = getZoomScale()) => {\n      dollyOut(dollyScale);\n      scope.update();\n    };\n    this.getScale = () => {\n      return scale;\n    };\n    this.setScale = (newScale) => {\n      setScale(newScale);\n      scope.update();\n    };\n    this.getZoomScale = () => {\n      return getZoomScale();\n    };\n    if (domElement !== void 0)\n      this.connect(domElement);\n    this.update();\n  }\n}\nclass MapControls extends OrbitControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n    this.screenSpacePanning = false;\n    this.mouseButtons.LEFT = MOUSE.PAN;\n    this.mouseButtons.RIGHT = MOUSE.ROTATE;\n    this.touches.ONE = TOUCH.PAN;\n    this.touches.TWO = TOUCH.DOLLY_ROTATE;\n  }\n}\nexport {\n  MapControls,\n  OrbitControls\n};\n//# sourceMappingURL=OrbitControls.js.map\n","import { BoxGeometry, Vector3 } from \"three\";\nconst tempNormal = /* @__PURE__ */ new Vector3();\nfunction getUv(faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength) {\n  const totArcLength = 2 * Math.PI * radius / 4;\n  const centerLength = Math.max(sideLength - 2 * radius, 0);\n  const halfArc = Math.PI / 4;\n  tempNormal.copy(normal);\n  tempNormal[projectionAxis] = 0;\n  tempNormal.normalize();\n  const arcUvRatio = 0.5 * totArcLength / (totArcLength + centerLength);\n  const arcAngleRatio = 1 - tempNormal.angleTo(faceDirVector) / halfArc;\n  if (Math.sign(tempNormal[uvAxis]) === 1) {\n    return arcAngleRatio * arcUvRatio;\n  } else {\n    const lenUv = centerLength / (totArcLength + centerLength);\n    return lenUv + arcUvRatio + arcUvRatio * (1 - arcAngleRatio);\n  }\n}\nclass RoundedBoxGeometry extends BoxGeometry {\n  constructor(width = 1, height = 1, depth = 1, segments = 2, radius = 0.1) {\n    segments = segments * 2 + 1;\n    radius = Math.min(width / 2, height / 2, depth / 2, radius);\n    super(1, 1, 1, segments, segments, segments);\n    if (segments === 1)\n      return;\n    const geometry2 = this.toNonIndexed();\n    this.index = null;\n    this.attributes.position = geometry2.attributes.position;\n    this.attributes.normal = geometry2.attributes.normal;\n    this.attributes.uv = geometry2.attributes.uv;\n    const position = new Vector3();\n    const normal = new Vector3();\n    const box = new Vector3(width, height, depth).divideScalar(2).subScalar(radius);\n    const positions = this.attributes.position.array;\n    const normals = this.attributes.normal.array;\n    const uvs = this.attributes.uv.array;\n    const faceTris = positions.length / 6;\n    const faceDirVector = new Vector3();\n    const halfSegmentSize = 0.5 / segments;\n    for (let i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      position.fromArray(positions, i);\n      normal.copy(position);\n      normal.x -= Math.sign(normal.x) * halfSegmentSize;\n      normal.y -= Math.sign(normal.y) * halfSegmentSize;\n      normal.z -= Math.sign(normal.z) * halfSegmentSize;\n      normal.normalize();\n      positions[i + 0] = box.x * Math.sign(position.x) + normal.x * radius;\n      positions[i + 1] = box.y * Math.sign(position.y) + normal.y * radius;\n      positions[i + 2] = box.z * Math.sign(position.z) + normal.z * radius;\n      normals[i + 0] = normal.x;\n      normals[i + 1] = normal.y;\n      normals[i + 2] = normal.z;\n      const side = Math.floor(i / faceTris);\n      switch (side) {\n        case 0:\n          faceDirVector.set(1, 0, 0);\n          uvs[j + 0] = getUv(faceDirVector, normal, \"z\", \"y\", radius, depth);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"z\", radius, height);\n          break;\n        case 1:\n          faceDirVector.set(-1, 0, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"z\", \"y\", radius, depth);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"z\", radius, height);\n          break;\n        case 2:\n          faceDirVector.set(0, 1, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"z\", radius, width);\n          uvs[j + 1] = getUv(faceDirVector, normal, \"z\", \"x\", radius, depth);\n          break;\n        case 3:\n          faceDirVector.set(0, -1, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"z\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"z\", \"x\", radius, depth);\n          break;\n        case 4:\n          faceDirVector.set(0, 0, 1);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"y\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"x\", radius, height);\n          break;\n        case 5:\n          faceDirVector.set(0, 0, -1);\n          uvs[j + 0] = getUv(faceDirVector, normal, \"x\", \"y\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"x\", radius, height);\n          break;\n      }\n    }\n  }\n}\nexport {\n  RoundedBoxGeometry\n};\n//# sourceMappingURL=RoundedBoxGeometry.js.map\n","import * as THREE from 'three';\nimport { RoundedBoxGeometry } from 'three-stdlib';\nimport { MATERIAL_CONFIG } from '../../../../constants';\n\n/**\n * Creates a d6 (six-sided die) geometry with rounded edges\n * @param radius - The size of the die (default 1.1 from original)\n * @returns BufferGeometry for the d6\n */\nexport function createD6Geometry(radius: number = 1.1): THREE.BufferGeometry {\n  // Original used chamfer value of 0.96, which seems to be a percentage\n  // For RoundedBoxGeometry, we need to convert this to an actual corner radius\n  const cornerRadius = radius * MATERIAL_CONFIG.chamferRadius;\n  \n  // Create rounded box with appropriate segments for smooth corners\n  const geometry = new RoundedBoxGeometry(\n    radius * 2,  // width\n    radius * 2,  // height\n    radius * 2,  // depth\n    MATERIAL_CONFIG.chamferSegments,  // width segments\n    cornerRadius // corner radius\n  );\n\n  // RoundedBoxGeometry might not have face groups by default\n  // We need to check and potentially add them for multi-material support\n  // Each face needs its own material index (0-5 for faces 1-6)\n  \n  return geometry;\n}\n\n/**\n * Calculate texture size as power of 2\n * @param approx - Approximate size needed\n * @returns Power of 2 size\n */\nfunction calcTextureSize(approx: number): number {\n  return Math.pow(2, Math.floor(Math.log(approx) / Math.log(2)));\n}\n\n/**\n * Create a texture with a number for dice face\n * @param text - The number to display\n * @param color - Text color\n * @param backColor - Background color\n * @param size - Base size for calculations\n * @param margin - Margin multiplier\n * @returns THREE.Texture with the number\n */\nfunction createTextTexture(\n  text: string,\n  color: string,\n  backColor: string,\n  size: number,\n  margin: number\n): THREE.Texture | null {\n  if (!text) return null;\n  \n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (!context) return null;\n  \n  const ts = calcTextureSize(size + size * 2 * margin) * 2;\n  canvas.width = canvas.height = ts;\n  \n  // Fill background\n  context.fillStyle = backColor;\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  \n  // Draw text\n  context.font = `${ts / (1 + 2 * margin)}pt ${MATERIAL_CONFIG.fontFamily}`;\n  context.textAlign = 'center';\n  context.textBaseline = 'middle';\n  context.fillStyle = color;\n  context.fillText(text, canvas.width / 2, canvas.height / 2);\n  \n  // Add dot for 6 and 9 to show orientation\n  if (text === '6' || text === '9') {\n    context.fillText('  .', canvas.width / 2, canvas.height / 2);\n  }\n  \n  const texture = new THREE.Texture(canvas);\n  texture.needsUpdate = true;\n  return texture;\n}\n\n/**\n * Creates materials for d6 faces (numbers 1-6)\n * @param size - Size of the die (default from original scale/2)\n * @param margin - Margin around numbers (default 0.9 from original)\n * @returns Array of materials for each face\n */\nexport function createD6Materials(\n  size: number = 50,\n  margin: number = 0.9,\n  diceColor: string = '#202020',\n  numberColor: string = '#aaaaaa'\n): THREE.Material[] {\n  const materials: THREE.Material[] = [];\n  \n  // Original material options from dice.js\n  const materialOptions = {\n    specular: 0x555555,\n    color: 0xffffff,\n    shininess: 100,\n    flatShading: true\n  };\n  \n  // Create a material for each face\n  // BoxGeometry face order in Three.js: +X, -X, +Y, -Y, +Z, -Z\n  // We need to arrange numbers so opposite faces sum to 7:\n  // Face 0 (+X): 1, Face 1 (-X): 6 (sum = 7)\n  // Face 2 (+Y): 2, Face 3 (-Y): 5 (sum = 7) \n  // Face 4 (+Z): 3, Face 5 (-Z): 4 (sum = 7)\n  const faceLabels = ['1', '6', '2', '5', '3', '4'];\n  \n  for (const label of faceLabels) {\n    const texture = createTextTexture(label, numberColor, diceColor, size, margin);\n    const material = new THREE.MeshPhongMaterial({\n      ...materialOptions,\n      map: texture\n    });\n    materials.push(material);\n  }\n  \n  return materials;\n}","/**\n * D8 (Octahedron) geometry and materials\n */\n\nimport * as THREE from \"three\";\nimport { MATERIAL_CONFIG } from \"../../../../constants\";\n\n/**\n * Creates a d8 (octahedron) geometry\n * @param radius - The size of the die\n * @returns BufferGeometry for the d8\n */\nexport function createD8Geometry(radius: number = 1): THREE.BufferGeometry {\n  // Octahedron vertices - 6 points along the axes\n  const vertices = [\n    [1, 0, 0], // 0: +X\n    [-1, 0, 0], // 1: -X\n    [0, 1, 0], // 2: +Y\n    [0, -1, 0], // 3: -Y\n    [0, 0, 1], // 4: +Z\n    [0, 0, -1], // 5: -Z\n  ];\n\n  // 8 triangular faces with vertex indices\n  const faces = [\n    // Top half (vertex 0 at +X)\n    [0, 2, 4], // Face 0\n    [0, 4, 3], // Face 1\n    [0, 3, 5], // Face 2\n    [0, 5, 2], // Face 3\n    // Bottom half (vertex 1 at -X)\n    [1, 3, 4], // Face 4\n    [1, 4, 2], // Face 5\n    [1, 2, 5], // Face 6\n    [1, 5, 3], // Face 7\n  ];\n\n  // Create non-indexed geometry for proper UV mapping\n  const positions: number[] = [];\n  const normals: number[] = [];\n  const uvs: number[] = [];\n\n  faces.forEach((face) => {\n    // Get the three vertices of this face\n    const v0 = vertices[face[0]];\n    const v1 = vertices[face[1]];\n    const v2 = vertices[face[2]];\n\n    // Add scaled positions\n    positions.push(\n      v0[0] * radius,\n      v0[1] * radius,\n      v0[2] * radius,\n      v1[0] * radius,\n      v1[1] * radius,\n      v1[2] * radius,\n      v2[0] * radius,\n      v2[1] * radius,\n      v2[2] * radius\n    );\n\n    // Calculate face normal\n    const va = new THREE.Vector3(v1[0] - v0[0], v1[1] - v0[1], v1[2] - v0[2]);\n    const vb = new THREE.Vector3(v2[0] - v0[0], v2[1] - v0[1], v2[2] - v0[2]);\n    const normal = new THREE.Vector3().crossVectors(va, vb).normalize();\n\n    // Add the same normal for all three vertices of the face\n    for (let i = 0; i < 3; i++) {\n      normals.push(normal.x, normal.y, normal.z);\n    }\n\n    // Add UV coordinates for triangle\n    uvs.push(\n      0.5,\n      1, // Top vertex\n      0,\n      0, // Bottom left\n      1,\n      0 // Bottom right\n    );\n  });\n\n  // Create geometry\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.Float32BufferAttribute(positions, 3)\n  );\n  geometry.setAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\n  geometry.setAttribute(\"uv\", new THREE.Float32BufferAttribute(uvs, 2));\n\n  // Add groups for multi-material support (one material per face)\n  for (let i = 0; i < 8; i++) {\n    geometry.addGroup(i * 3, 3, i);\n  }\n\n  return geometry;\n}\n\n/**\n * Calculate texture size as power of 2\n */\nfunction calcTextureSize(approx: number): number {\n  return Math.pow(2, Math.floor(Math.log(approx) / Math.log(2)));\n}\n\n/**\n * Create a texture with a number for dice face\n */\nfunction createTextTexture(\n  text: string,\n  color: string,\n  backColor: string,\n  size: number = 100,\n  margin: number = 1.0\n): THREE.Texture {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) throw new Error(\"Could not get canvas context\");\n\n  const ts = calcTextureSize(size + size * 2 * margin) * 2;\n  canvas.width = canvas.height = ts;\n\n  // Fill background\n  context.fillStyle = backColor;\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  // Draw text\n  context.font = `${ts / (1 + 2 * margin)}pt ${MATERIAL_CONFIG.fontFamily}`;\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.fillStyle = color;\n  // Position text in center of equilateral triangle (slightly lower for visual centering)\n  const centerY = canvas.height * 0.55;\n  context.fillText(text, canvas.width / 2, centerY);\n\n  const texture = new THREE.Texture(canvas);\n  texture.needsUpdate = true;\n  return texture;\n}\n\n/**\n * Creates materials for d8 faces (numbers 1-8)\n */\nexport function createD8Materials(\n  size: number = 50,\n  margin: number = 0.9,\n  diceColor: string = \"#202020\",\n  numberColor: string = \"#aaaaaa\"\n): THREE.Material[] {\n  const materials: THREE.Material[] = [];\n\n  // Material options matching d6\n  const materialOptions = {\n    specular: 0x555555,\n    color: 0xffffff,\n    shininess: 100,\n    flatShading: true,\n  };\n\n  // Create material for each face (1-8)\n  for (let i = 1; i <= 8; i++) {\n    const texture = createTextTexture(\n      i.toString(),\n      numberColor,\n      diceColor,\n      size,\n      margin\n    );\n\n    const material = new THREE.MeshPhongMaterial({\n      ...materialOptions,\n      map: texture,\n    });\n\n    materials.push(material);\n  }\n\n  return materials;\n}\n\n/**\n * Creates a complete d8 die mesh\n */\nexport function createD8(\n  dieSize: number = 1,\n  diceColor: string = \"#202020\",\n  numberColor: string = \"#aaaaaa\"\n): {\n  geometry: THREE.BufferGeometry;\n  materials: THREE.Material[];\n} {\n  return {\n    geometry: createD8Geometry(dieSize),\n    materials: createD8Materials(50, 0.9, diceColor, numberColor),\n  };\n}\n","import * as THREE from \"three\";\n\n// Create text texture for die faces\nfunction createD20TextTexture(\n  text: string,\n  textColor = \"#ffffff\",\n  diceColor = \"#4a90e2\"\n): THREE.Texture {\n  const size = 256;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n  const context = canvas.getContext(\"2d\")!;\n\n  // Fill with dice color\n  context.fillStyle = diceColor;\n  context.fillRect(0, 0, size, size);\n\n  // Draw text centered in triangle\n  context.fillStyle = textColor;\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.font = \"bold 80px Arial\";\n\n  // Position text in center of equilateral triangle (slightly lower for visual balance)\n  const centerY = size * 0.67; // Adjusted lower for better visual centering in triangle\n  context.fillText(text, size / 2, centerY);\n\n  const texture = new THREE.Texture(canvas);\n  texture.needsUpdate = true;\n  return texture;\n}\n\n// Create UV coordinates for an equilateral triangle centered in UV space\nfunction createTriangleUVs(): Float32Array {\n  // UV coordinates for centered equilateral triangle\n  // Top vertex at (0.5, 0.1), bottom left at (0.1, 0.9), bottom right at (0.9, 0.9)\n  return new Float32Array([\n    0.5,\n    0.9, // top vertex (flipped Y)\n    0.1,\n    0.1, // bottom left\n    0.9,\n    0.1, // bottom right\n  ]);\n}\n\nexport function createD20(\n  radius = 1.0,\n  diceColor = '#2b8a51',\n  numberColor = '#aaaaaa'\n): {\n  geometry: THREE.IcosahedronGeometry;\n  materials: THREE.Material[];\n} {\n  const geometry = new THREE.IcosahedronGeometry(radius);\n\n  // Create custom UV mapping for each triangular face\n  const uvs = [];\n  const triangleUV = createTriangleUVs();\n\n  // Each face needs 3 UV coordinates (one per vertex)\n  for (let i = 0; i < 20; i++) {\n    uvs.push(...triangleUV);\n  }\n\n  // Apply UV coordinates to geometry\n  geometry.setAttribute(\n    \"uv\",\n    new THREE.BufferAttribute(new Float32Array(uvs), 2)\n  );\n\n  // Create materials with numbers 1-20\n  const materials: THREE.Material[] = [];\n  \n  for (let i = 1; i <= 20; i++) {\n    const texture = createD20TextTexture(i.toString(), numberColor, diceColor);\n    const material = new THREE.MeshPhongMaterial({\n      map: texture,\n      color: 0xffffff, // White so texture colors show properly\n      shininess: 100,\n      flatShading: true,\n    });\n    materials.push(material);\n  }\n\n  // Set up geometry groups for multi-material support\n  // IcosahedronGeometry has 20 faces, 3 vertices per face\n  geometry.clearGroups();\n  for (let i = 0; i < 20; i++) {\n    geometry.addGroup(i * 3, 3, i);\n  }\n\n  return { geometry, materials };\n}\n\n// Physics properties for d20\nexport const d20PhysicsProps = {\n  mass: 300,\n  friction: 0.01,\n  restitution: 0.5,\n};\n","// Shared D20 face detection constants and logic\n\n// Golden ratio\nexport const PHI = (1 + Math.sqrt(5)) / 2;\n\n// Normalized icosahedron vertices\nexport const ICOSAHEDRON_VERTICES = [\n  [-1, PHI, 0],\n  [1, PHI, 0],\n  [-1, -PHI, 0],\n  [1, -PHI, 0],\n  [0, -1, PHI],\n  [0, 1, PHI],\n  [0, -1, -PHI],\n  [0, 1, -PHI],\n  [PHI, 0, -1],\n  [PHI, 0, 1],\n  [-PHI, 0, -1],\n  [-PHI, 0, 1]\n].map(v => {\n  // Normalize vertices\n  const scale = 1 / Math.sqrt(1 + PHI * PHI);\n  return [v[0] * scale, v[1] * scale, v[2] * scale];\n});\n\n// Face definitions (vertex indices)\nexport const ICOSAHEDRON_FACES = [\n  [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],\n  [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],\n  [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],\n  [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]\n];\n\n// Helper to calculate face normal from three vertices\nexport function calculateFaceNormal(\n  v1: number[],\n  v2: number[],\n  v3: number[]\n): number[] {\n  // Calculate edges\n  const edge1 = [v2[0] - v1[0], v2[1] - v1[1], v2[2] - v1[2]];\n  const edge2 = [v3[0] - v1[0], v3[1] - v1[1], v3[2] - v1[2]];\n  \n  // Cross product\n  const normal = [\n    edge1[1] * edge2[2] - edge1[2] * edge2[1],\n    edge1[2] * edge2[0] - edge1[0] * edge2[2],\n    edge1[0] * edge2[1] - edge1[1] * edge2[0]\n  ];\n  \n  // Normalize\n  const length = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);\n  return [normal[0] / length, normal[1] / length, normal[2] / length];\n}\n\n// Apply quaternion rotation to a vector\nexport function applyQuaternion(\n  vector: number[],\n  quaternion: { x: number; y: number; z: number; w: number }\n): number[] {\n  const x = vector[0];\n  const y = vector[1];\n  const z = vector[2];\n  \n  const qx = quaternion.x;\n  const qy = quaternion.y;\n  const qz = quaternion.z;\n  const qw = quaternion.w;\n  \n  // Calculate quaternion * vector * quaternion^-1\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n  \n  return [\n    ix * qw + iw * -qx + iy * -qz - iz * -qy,\n    iy * qw + iw * -qy + iz * -qx - ix * -qz,\n    iz * qw + iw * -qz + ix * -qy - iy * -qx\n  ];\n}\n\n// Detect which D20 face is pointing up\nexport function detectD20Face(quaternion: { x: number; y: number; z: number; w: number }): number {\n  const upVector = [0, 1, 0];\n  let closestFace = -1;\n  let closestDot = -2;\n  \n  for (let i = 0; i < ICOSAHEDRON_FACES.length; i++) {\n    const face = ICOSAHEDRON_FACES[i];\n    \n    // Get vertices of this face\n    const v1 = ICOSAHEDRON_VERTICES[face[0]];\n    const v2 = ICOSAHEDRON_VERTICES[face[1]];\n    const v3 = ICOSAHEDRON_VERTICES[face[2]];\n    \n    // Calculate face normal\n    const faceNormal = calculateFaceNormal(v1, v2, v3);\n    \n    // Transform to world space\n    const worldNormal = applyQuaternion(faceNormal, quaternion);\n    \n    // Dot product with up vector\n    const dot = worldNormal[0] * upVector[0] + worldNormal[1] * upVector[1] + worldNormal[2] * upVector[2];\n    \n    if (dot > closestDot) {\n      closestDot = dot;\n      closestFace = i;\n    }\n  }\n  \n  return closestFace;\n}","import * as CANNON from 'cannon-es';\nimport type { PhysicsParams, PhysicsSetup, DieType } from '../../../types';\nimport { TABLE_CONFIG } from '../../../constants';\n\nexport function createPhysicsWorld(physicsParams: PhysicsParams): PhysicsSetup {\n  // Create world\n  const world = new CANNON.World();\n  world.gravity.set(0, -physicsParams.gravity, 0);\n  \n  // Create materials\n  const diceMaterial = new CANNON.Material('dice');\n  const groundMaterial = new CANNON.Material('ground');\n  const wallMaterial = new CANNON.Material('wall');\n  \n  // Add contact materials\n  world.addContactMaterial(new CANNON.ContactMaterial(\n    diceMaterial,\n    groundMaterial,\n    {\n      friction: physicsParams.diceFriction,\n      restitution: physicsParams.diceRestitution\n    }\n  ));\n  \n  world.addContactMaterial(new CANNON.ContactMaterial(\n    diceMaterial,\n    wallMaterial,\n    {\n      friction: physicsParams.wallFriction,\n      restitution: physicsParams.wallRestitution\n    }\n  ));\n  \n  world.addContactMaterial(new CANNON.ContactMaterial(\n    diceMaterial,\n    diceMaterial,\n    {\n      friction: physicsParams.diceFriction,\n      restitution: physicsParams.diceRestitution\n    }\n  ));\n  \n  // Create ground - use a box instead of plane for better stability\n  const groundShape = new CANNON.Box(new CANNON.Vec3(TABLE_CONFIG.groundSize/2, 0.5, TABLE_CONFIG.groundSize/2));\n  const groundBody = new CANNON.Body({\n    mass: 0,\n    shape: groundShape,\n    material: groundMaterial,\n    type: CANNON.Body.STATIC\n  });\n  groundBody.position.set(0, TABLE_CONFIG.groundY - 0.5, 0);\n  world.addBody(groundBody);\n  \n  // No walls for transparent overlay mode\n  const wallBodies: CANNON.Body[] = [];\n  \n  return {\n    world,\n    diceMaterial,\n    groundMaterial,\n    wallMaterial,\n    groundBody,\n    wallBodies\n  };\n}\n\nexport function createDieBody(\n  dieType: DieType,\n  dieSize: number,\n  diceMaterial: CANNON.Material,\n  physicsParams: PhysicsParams\n): CANNON.Body {\n  let dieBody: CANNON.Body;\n  \n  if (dieType === 'd6') {\n    const dieShape = new CANNON.Box(new CANNON.Vec3(dieSize, dieSize, dieSize));\n    dieBody = new CANNON.Body({\n      mass: 1,\n      shape: dieShape,\n      material: diceMaterial,\n      linearDamping: physicsParams.linearDamping,\n      angularDamping: physicsParams.angularDamping\n    });\n  } else if (dieType === 'd8') {\n    // D8 octahedron physics shape\n    const vertices = [\n      new CANNON.Vec3(1, 0, 0),\n      new CANNON.Vec3(-1, 0, 0),\n      new CANNON.Vec3(0, 1, 0),\n      new CANNON.Vec3(0, -1, 0),\n      new CANNON.Vec3(0, 0, 1),\n      new CANNON.Vec3(0, 0, -1),\n    ];\n    \n    // Scale vertices by die size\n    vertices.forEach(v => v.scale(dieSize, v));\n    \n    // 8 triangular faces (same as geometry)\n    const faces = [\n      [0, 2, 4], [0, 4, 3], [0, 3, 5], [0, 5, 2],\n      [1, 3, 4], [1, 4, 2], [1, 2, 5], [1, 5, 3]\n    ];\n    \n    const dieShape = new CANNON.ConvexPolyhedron({ vertices, faces });\n    dieBody = new CANNON.Body({\n      mass: 1,\n      shape: dieShape,\n      material: diceMaterial,\n      linearDamping: physicsParams.linearDamping,\n      angularDamping: physicsParams.angularDamping\n    });\n  } else {\n    // D20 physics shape\n    const t = (1 + Math.sqrt(5)) / 2;\n    const vertices = [\n      new CANNON.Vec3(-1, t, 0),\n      new CANNON.Vec3(1, t, 0),\n      new CANNON.Vec3(-1, -t, 0),\n      new CANNON.Vec3(1, -t, 0),\n      new CANNON.Vec3(0, -1, t),\n      new CANNON.Vec3(0, 1, t),\n      new CANNON.Vec3(0, -1, -t),\n      new CANNON.Vec3(0, 1, -t),\n      new CANNON.Vec3(t, 0, -1),\n      new CANNON.Vec3(t, 0, 1),\n      new CANNON.Vec3(-t, 0, -1),\n      new CANNON.Vec3(-t, 0, 1)\n    ];\n    \n    vertices.forEach(v => v.scale(dieSize / Math.sqrt(1 + t * t), v));\n    \n    const faces = [\n      [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],\n      [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],\n      [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],\n      [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]\n    ];\n    \n    const dieShape = new CANNON.ConvexPolyhedron({ vertices, faces });\n    dieBody = new CANNON.Body({\n      mass: 1,\n      shape: dieShape,\n      material: diceMaterial,\n      linearDamping: physicsParams.linearDamping,\n      angularDamping: physicsParams.angularDamping\n    });\n  }\n  \n  return dieBody;\n}","import * as CANNON from 'cannon-es';\nimport { detectD20Face } from './d20FaceDetection';\nimport { createPhysicsWorld, createDieBody } from './physicsSetup';\nimport type { PhysicsParams, ThrowParams, DieType } from '../../../types';\nimport { THROW_CONFIG, PHYSICS_SIM_CONFIG, DICE_CONFIGS } from '../../../constants';\n\n// Generate random throw parameters\nexport function generateThrowParams(throwForce: number = THROW_CONFIG.defaultForce): ThrowParams {\n  const force = Math.max(THROW_CONFIG.minForce, Math.min(THROW_CONFIG.maxForce, throwForce));\n  \n  return {\n    position: THROW_CONFIG.startPosition,\n    rotation: [\n      Math.random() * Math.PI * 2,\n      Math.random() * Math.PI * 2,\n      Math.random() * Math.PI * 2\n    ],\n    velocity: [\n      (Math.random() - 0.5) * THROW_CONFIG.velocityScale * force,\n      THROW_CONFIG.velocityScale * force,\n      (Math.random() - 0.5) * THROW_CONFIG.velocityScale * force\n    ],\n    angularVelocity: [\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force,\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force,\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force\n    ]\n  };\n}\n\n// Generate throw parameters from bottom-right corner\nexport function generateBottomRightThrowParams(throwForce: number = THROW_CONFIG.defaultForce): ThrowParams {\n  const force = Math.max(THROW_CONFIG.minForce, Math.min(THROW_CONFIG.maxForce, throwForce));\n  \n  return {\n    position: [4, 2, 3] as [number, number, number], // Bottom-right corner, higher up\n    rotation: [\n      Math.random() * Math.PI * 2,\n      Math.random() * Math.PI * 2,\n      Math.random() * Math.PI * 2\n    ],\n    velocity: [\n      -THROW_CONFIG.velocityScale * force * 1.5, // More force towards left\n      THROW_CONFIG.velocityScale * force * 0.8,   // Less upward, more horizontal\n      -THROW_CONFIG.velocityScale * force * 1.0  // Towards camera\n    ],\n    angularVelocity: [\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force * 1.5,\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force * 1.5,\n      (Math.random() - 0.5) * THROW_CONFIG.angularVelocityScale * force * 1.5\n    ]\n  };\n}\n\n\n// Check if die has stopped moving\nexport function diceHasStopped(body: CANNON.Body, threshold: number = PHYSICS_SIM_CONFIG.linearThreshold): boolean {\n  const v = body.velocity;\n  const av = body.angularVelocity;\n  \n  const linearSpeed = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n  const angularSpeed = Math.sqrt(av.x * av.x + av.y * av.y + av.z * av.z);\n  \n  return linearSpeed < threshold && angularSpeed < threshold;\n}\n\n// Detect which face is up for a Cannon body\nexport function detectFaceValueFromBody(body: CANNON.Body, dieType: DieType = 'd6'): number {\n  const upVector = new CANNON.Vec3(0, 1, 0);\n  \n  if (dieType === 'd6') {\n    // Box face normals in local space\n    const faceNormals = [\n      new CANNON.Vec3(1, 0, 0),   // +X face (1)\n      new CANNON.Vec3(-1, 0, 0),  // -X face (6)\n      new CANNON.Vec3(0, 1, 0),   // +Y face (2)\n      new CANNON.Vec3(0, -1, 0),  // -Y face (5)\n      new CANNON.Vec3(0, 0, 1),   // +Z face (3)\n      new CANNON.Vec3(0, 0, -1),  // -Z face (4)\n    ];\n    \n    // Face values based on our material order\n    const faceValues = DICE_CONFIGS.d6.defaultMapping;\n    \n    let closestFace = -1;\n    let closestDot = -2;\n    \n    // Transform each face normal to world space and compare with up\n    for (let i = 0; i < faceNormals.length; i++) {\n      const worldNormal = body.quaternion.vmult(faceNormals[i]);\n      const dot = worldNormal.dot(upVector);\n      \n      if (dot > closestDot) {\n        closestDot = dot;\n        closestFace = i;\n      }\n    }\n    \n    return closestFace >= 0 ? faceValues[closestFace] : -1;\n  } else if (dieType === 'd8') {\n    // D8 octahedron face normals\n    const faceNormals = [\n      // Top half faces (vertices 0,2,4 / 0,4,3 / 0,3,5 / 0,5,2)\n      new CANNON.Vec3(0.577, 0.577, 0.577),\n      new CANNON.Vec3(0.577, -0.577, 0.577),\n      new CANNON.Vec3(0.577, -0.577, -0.577),\n      new CANNON.Vec3(0.577, 0.577, -0.577),\n      // Bottom half faces (vertices 1,3,4 / 1,4,2 / 1,2,5 / 1,5,3)\n      new CANNON.Vec3(-0.577, -0.577, 0.577),\n      new CANNON.Vec3(-0.577, 0.577, 0.577),\n      new CANNON.Vec3(-0.577, 0.577, -0.577),\n      new CANNON.Vec3(-0.577, -0.577, -0.577),\n    ];\n    \n    const faceValues = DICE_CONFIGS.d8.defaultMapping;\n    \n    let closestFace = -1;\n    let closestDot = -2;\n    \n    for (let i = 0; i < faceNormals.length; i++) {\n      const worldNormal = body.quaternion.vmult(faceNormals[i]);\n      const dot = worldNormal.dot(upVector);\n      \n      if (dot > closestDot) {\n        closestDot = dot;\n        closestFace = i;\n      }\n    }\n    \n    return closestFace >= 0 ? faceValues[closestFace] : -1;\n  } else {\n    // For d20, use shared face detection logic\n    const faceIndex = detectD20Face(body.quaternion);\n    \n    // Face index to value mapping (1-20)\n    return faceIndex >= 0 ? faceIndex + 1 : -1;\n  }\n}\n\n// Run physics simulation and return predicted result\nexport function simulateThrow(params: ThrowParams, dieSize: number, dieType: DieType = 'd6', physicsParams: PhysicsParams): number {\n  // Create physics world using the exact same setup as visual\n  const physicsSetup = createPhysicsWorld(physicsParams);\n  const { world, diceMaterial } = physicsSetup;\n  \n  // Create die body using the exact same function as visual\n  const dieBody = createDieBody(dieType, dieSize, diceMaterial, physicsParams);\n  \n  // Set initial state from params\n  dieBody.position.set(...params.position);\n  dieBody.quaternion.setFromEuler(...params.rotation);\n  dieBody.velocity.set(...params.velocity);\n  dieBody.angularVelocity.set(...params.angularVelocity);\n  \n  world.addBody(dieBody);\n  \n  // Run simulation\n  const maxSteps = PHYSICS_SIM_CONFIG.maxSimSteps;\n  let steps = 0;\n  let stopped = false;\n  let stoppedFrames = 0;\n  const requiredStoppedFrames = PHYSICS_SIM_CONFIG.stoppedFramesRequired;\n  \n  while (!stopped && steps < maxSteps) {\n    world.step(PHYSICS_SIM_CONFIG.timeStep);\n    steps++;\n    \n    // Check if die is stopped (more strict for D20)\n    const threshold = dieType === 'd20' ? PHYSICS_SIM_CONFIG.linearThresholdD20 : PHYSICS_SIM_CONFIG.linearThreshold;\n    if (diceHasStopped(dieBody, threshold)) {\n      stoppedFrames++;\n      if (stoppedFrames >= requiredStoppedFrames) {\n        stopped = true;\n      }\n    } else {\n      stoppedFrames = 0;\n    }\n  }\n  \n  // Get final face value\n  return detectFaceValueFromBody(dieBody, dieType);\n}","/**\n * Face detection logic extracted from DiceRoller.tsx\n * This is the EXACT logic, just moved to a shared location\n */\n\nimport * as THREE from 'three';\nimport { detectD20Face } from './d20FaceDetection';\nimport type { DieType, FaceMapping } from '../../../types';\n\n/**\n * D8 face normals for octahedron\n * Calculated from the geometry definition\n */\nconst D8_FACE_NORMALS = [\n  // Top half faces (calculated from vertices)\n  new THREE.Vector3(0.577, 0.577, 0.577),   // Face 0: normal of triangle (0,2,4)\n  new THREE.Vector3(0.577, -0.577, 0.577),  // Face 1: normal of triangle (0,4,3)\n  new THREE.Vector3(0.577, -0.577, -0.577), // Face 2: normal of triangle (0,3,5)\n  new THREE.Vector3(0.577, 0.577, -0.577),  // Face 3: normal of triangle (0,5,2)\n  // Bottom half faces\n  new THREE.Vector3(-0.577, -0.577, 0.577),  // Face 4: normal of triangle (1,3,4)\n  new THREE.Vector3(-0.577, 0.577, 0.577),   // Face 5: normal of triangle (1,4,2)\n  new THREE.Vector3(-0.577, 0.577, -0.577),  // Face 6: normal of triangle (1,2,5)\n  new THREE.Vector3(-0.577, -0.577, -0.577), // Face 7: normal of triangle (1,5,3)\n];\n\n/**\n * Detect which face is up for a Three.js mesh\n * Extracted from DiceRoller.tsx detectFaceValue callback\n * \n * @param mesh The die mesh  \n * @param dieType Type of die\n * @param currentFaceMapping Current face value mapping\n * @returns The value shown on the top face\n */\nexport function detectMeshFaceValue(\n  mesh: THREE.Mesh,\n  dieType: DieType,\n  currentFaceMapping: FaceMapping\n): number {\n  const upVector = new THREE.Vector3(0, 1, 0);\n  let closestFace = -1;\n  let closestAngle = Math.PI * 2;\n  \n  if (dieType === 'd6') {\n    // Face normals for a box\n    const faceNormals = [\n      new THREE.Vector3(1, 0, 0),   // +X\n      new THREE.Vector3(-1, 0, 0),  // -X\n      new THREE.Vector3(0, 1, 0),   // +Y\n      new THREE.Vector3(0, -1, 0),  // -Y\n      new THREE.Vector3(0, 0, 1),   // +Z\n      new THREE.Vector3(0, 0, -1),  // -Z\n    ];\n    \n    for (let i = 0; i < faceNormals.length; i++) {\n      const worldNormal = faceNormals[i].clone()\n        .applyQuaternion(mesh.quaternion)\n        .normalize();\n      const angle = worldNormal.angleTo(upVector);\n      \n      if (angle < closestAngle) {\n        closestAngle = angle;\n        closestFace = i;\n      }\n    }\n    \n    // Use the current face mapping to get the actual value\n    return closestFace >= 0 ? currentFaceMapping[closestFace] : -1;\n  } else if (dieType === 'd8') {\n    // D8 face detection\n    for (let i = 0; i < D8_FACE_NORMALS.length; i++) {\n      const worldNormal = D8_FACE_NORMALS[i].clone()\n        .applyQuaternion(mesh.quaternion)\n        .normalize();\n      const angle = worldNormal.angleTo(upVector);\n      \n      if (angle < closestAngle) {\n        closestAngle = angle;\n        closestFace = i;\n      }\n    }\n    \n    // Use the current face mapping to get the actual value\n    return closestFace >= 0 ? currentFaceMapping[closestFace] : -1;\n  } else {\n    // D20 face detection using shared logic\n    const faceIndex = detectD20Face(mesh.quaternion);\n    \n    // Use the current face mapping to get the actual value\n    return faceIndex >= 0 ? currentFaceMapping[faceIndex] : -1;\n  }\n}","/**\n * Scene setup utilities extracted from DiceRoller.tsx\n */\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three-stdlib';\nimport { SCENE_CONFIG, LIGHTING_CONFIG, TABLE_CONFIG, CONTROLS_CONFIG } from '../../../constants';\n\n/**\n * Create and configure the Three.js scene\n */\nexport function createScene(): THREE.Scene {\n  const scene = new THREE.Scene();\n  // No background for transparent overlay\n  scene.background = null;\n  return scene;\n}\n\n/**\n * Create and configure the camera\n */\nexport function createCamera(width: number, height: number): THREE.PerspectiveCamera {\n  const aspect = width / height;\n  const camera = new THREE.PerspectiveCamera(\n    SCENE_CONFIG.cameraFov, \n    aspect, \n    SCENE_CONFIG.cameraNear, \n    SCENE_CONFIG.cameraFar\n  );\n  camera.position.set(...SCENE_CONFIG.cameraPosition);\n  camera.lookAt(...SCENE_CONFIG.cameraLookAt);\n  return camera;\n}\n\n/**\n * Create and configure the renderer\n */\nexport function createRenderer(width: number, height: number): THREE.WebGLRenderer {\n  const renderer = new THREE.WebGLRenderer({ \n    antialias: true, \n    alpha: true \n  });\n  renderer.setSize(width, height);\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  return renderer;\n}\n\n/**\n * Add lighting to the scene\n */\nexport function addLighting(scene: THREE.Scene): void {\n  // Ambient light\n  const ambientLight = new THREE.AmbientLight(0xffffff, LIGHTING_CONFIG.ambientIntensity);\n  scene.add(ambientLight);\n  \n  // Directional light\n  const directionalLight = new THREE.DirectionalLight(0xffffff, LIGHTING_CONFIG.directionalIntensity);\n  directionalLight.position.set(...LIGHTING_CONFIG.directionalPosition);\n  directionalLight.castShadow = true;\n  directionalLight.shadow.mapSize.width = LIGHTING_CONFIG.shadowMapSize;\n  directionalLight.shadow.mapSize.height = LIGHTING_CONFIG.shadowMapSize;\n  scene.add(directionalLight);\n}\n\n/**\n * Create and add the ground plane\n */\nexport function addGround(scene: THREE.Scene): void {\n  const groundGeometry = new THREE.PlaneGeometry(TABLE_CONFIG.groundSize, TABLE_CONFIG.groundSize);\n  // Shadow-only material - transparent but shows shadows\n  const groundVisualMaterial = new THREE.ShadowMaterial({ \n    opacity: 0.5 // Adjust shadow darkness (0 = invisible, 1 = black)\n  });\n  const ground = new THREE.Mesh(groundGeometry, groundVisualMaterial);\n  ground.rotation.x = -Math.PI / 2;\n  ground.position.y = TABLE_CONFIG.groundY;\n  ground.receiveShadow = true;\n  scene.add(ground);\n}\n\n/**\n * Create and add visual walls\n */\nexport function addWalls(scene: THREE.Scene): void {\n  // Wall material shared by all walls\n  const wallVisualMaterial = new THREE.MeshPhongMaterial({ \n    color: TABLE_CONFIG.wallColor,\n    transparent: true,\n    opacity: TABLE_CONFIG.wallOpacity\n  });\n  \n  const tableSize = TABLE_CONFIG.size;\n  const wallHeight = TABLE_CONFIG.wallHeight;\n  const wallThickness = TABLE_CONFIG.wallThickness;\n  \n  // Wall definitions\n  const walls = [\n    { // Front\n      size: [tableSize * 2, wallHeight, wallThickness] as [number, number, number],\n      pos: [0, TABLE_CONFIG.groundY + wallHeight / 2, -tableSize] as [number, number, number]\n    },\n    { // Back\n      size: [tableSize * 2, wallHeight, wallThickness] as [number, number, number],\n      pos: [0, TABLE_CONFIG.groundY + wallHeight / 2, tableSize] as [number, number, number]\n    },\n    { // Left\n      size: [wallThickness, wallHeight, tableSize * 2] as [number, number, number],\n      pos: [-tableSize, TABLE_CONFIG.groundY + wallHeight / 2, 0] as [number, number, number]\n    },\n    { // Right\n      size: [wallThickness, wallHeight, tableSize * 2] as [number, number, number],\n      pos: [tableSize, TABLE_CONFIG.groundY + wallHeight / 2, 0] as [number, number, number]\n    }\n  ];\n  \n  // Create and add each wall\n  walls.forEach(({ size, pos }) => {\n    const wall = new THREE.Mesh(\n      new THREE.BoxGeometry(...size),\n      wallVisualMaterial\n    );\n    wall.position.set(...pos);\n    scene.add(wall);\n  });\n}\n\n/**\n * Create and configure orbit controls\n */\nexport function createControls(camera: THREE.PerspectiveCamera, renderer: THREE.WebGLRenderer): OrbitControls {\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enablePan = CONTROLS_CONFIG.enablePan;\n  controls.minDistance = CONTROLS_CONFIG.minDistance;\n  controls.maxDistance = CONTROLS_CONFIG.maxDistance;\n  controls.target.set(...CONTROLS_CONFIG.target);\n  controls.update();\n  return controls;\n}\n\n/**\n * Complete scene setup - convenience function that does everything\n */\nexport interface SceneSetupResult {\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  renderer: THREE.WebGLRenderer;\n  controls: OrbitControls;\n}\n\nexport function setupCompleteScene(\n  width: number, \n  height: number,\n  mountElement: HTMLElement\n): SceneSetupResult {\n  // Create core components\n  const scene = createScene();\n  const camera = createCamera(width, height);\n  const renderer = createRenderer(width, height);\n  \n  // Check if there's already a canvas in the mount\n  const existingCanvas = mountElement.querySelector('canvas');\n  if (existingCanvas) {\n    mountElement.removeChild(existingCanvas);\n  }\n  \n  // Append renderer to DOM\n  mountElement.appendChild(renderer.domElement);\n  \n  // Add scene elements\n  addLighting(scene);\n  addGround(scene);\n  // No walls for transparent overlay\n  \n  // Create controls\n  const controls = createControls(camera, renderer);\n  \n  return {\n    scene,\n    camera,\n    renderer,\n    controls\n  };\n}","/**\n * Material shifting logic for predetermined dice results\n * \n * CRITICAL: This logic must exactly match the original implementation\n * to ensure predetermined results work correctly.\n */\n\nimport * as THREE from 'three';\nimport type { DieType, FaceMapping } from '../../../types';\nimport { DICE_CONFIGS } from '../../../constants';\n\n/**\n * Result of material shifting calculation\n */\nexport interface MaterialShiftResult {\n  shiftedMaterials: THREE.Material[];\n  newFaceMapping: FaceMapping;\n  shift: number;\n}\n\n/**\n * Calculate material shift needed to show desired result\n * Extracted from DiceRoller.tsx throwDie callback (lines 179-209)\n * \n * @param predictedResult - What the die would naturally show\n * @param desiredResult - What we want the die to show\n * @param baseMaterials - Original unshifted materials\n * @param dieType - Type of die\n * @returns Shifted materials and face mapping, or null if no shift needed\n */\nexport function calculateMaterialShift(\n  predictedResult: number,\n  desiredResult: number,\n  baseMaterials: THREE.Material[],\n  dieType: DieType\n): MaterialShiftResult | null {\n  // If predicted matches desired, no shift needed\n  if (predictedResult <= 0 || predictedResult === desiredResult) {\n    return null;\n  }\n  \n  const numFaces = DICE_CONFIGS[dieType].faces;\n  const defaultMapping = DICE_CONFIGS[dieType].defaultMapping;\n  \n  // Find which face will be up\n  const predictedFaceIndex = defaultMapping.indexOf(predictedResult);\n  \n  // Calculate shift needed\n  let shift = 0;\n  for (let s = 0; s < numFaces; s++) {\n    const testValue = defaultMapping[(predictedFaceIndex - s + numFaces) % numFaces];\n    if (testValue === desiredResult) {\n      shift = s;\n      break;\n    }\n  }\n  \n  // Apply shift to materials and update face mapping\n  const shiftedMaterials = new Array(numFaces);\n  const newFaceMapping = new Array(numFaces);\n  \n  // Safety check - ensure we have the right number of materials\n  if (baseMaterials.length !== numFaces) {\n    console.error(`Material count mismatch for ${dieType}: expected ${numFaces}, got ${baseMaterials.length}`);\n    return null;\n  }\n  \n  for (let i = 0; i < numFaces; i++) {\n    const sourceIndex = (i - shift + numFaces) % numFaces;\n    shiftedMaterials[i] = baseMaterials[sourceIndex];\n    newFaceMapping[i] = defaultMapping[sourceIndex];\n  }\n  \n  return {\n    shiftedMaterials,\n    newFaceMapping,\n    shift\n  };\n}\n\n/**\n * Apply material shift to a mesh\n * \n * @param mesh - The die mesh to update\n * @param shiftResult - The calculated shift result\n */\nexport function applyMaterialShift(\n  mesh: THREE.Mesh,\n  shiftResult: MaterialShiftResult\n): void {\n  mesh.material = shiftResult.shiftedMaterials;\n}\n\n/**\n * Reset materials to default (no shift)\n * \n * @param mesh - The die mesh to update\n * @param baseMaterials - Original unshifted materials\n * @param dieType - Type of die\n * @returns Default face mapping\n */\nexport function resetMaterials(\n  mesh: THREE.Mesh,\n  baseMaterials: THREE.Material[],\n  dieType: DieType\n): FaceMapping {\n  mesh.material = baseMaterials;\n  return DICE_CONFIGS[dieType].defaultMapping;\n}","// React\nimport { useRef, useState, useEffect, useCallback, forwardRef, useImperativeHandle } from \"react\";\n\n// Three.js\nimport * as THREE from \"three\";\n\n// Physics\nimport * as CANNON from \"cannon-es\";\n\n// Local components\nimport PhysicsControls from \"./PhysicsControls\";\n\n// Utils\nimport { createD6Geometry, createD6Materials } from \"./utils/geometries/d6\";\nimport { createD8 } from \"./utils/geometries/d8\";\nimport { createD20 } from \"./utils/geometries/d20\";\nimport { generateThrowParams, generateBottomRightThrowParams, simulateThrow } from \"./utils/predeterminedResults\";\nimport { createPhysicsWorld, createDieBody } from \"./utils/physicsSetup\";\nimport { detectMeshFaceValue } from \"./utils/faceDetection\";\nimport { setupCompleteScene } from \"./utils/sceneSetup\";\nimport { calculateMaterialShift, resetMaterials } from \"./utils/materialShifting\";\n\n// Types\nimport type { DiceRollerProps, DiceRollerHandle, DieType, PhysicsParams } from \"../../types\";\n\n// Constants\nimport { \n  DEFAULT_PHYSICS,\n  PHYSICS_SIM_CONFIG,\n  THROW_CONFIG,\n  ANIMATION_CONFIG,\n  ERROR_MESSAGES,\n  UI_CONFIG,\n  DICE_CONFIGS\n} from \"../../constants\";\n\n// Styles\nimport styles from \"./DiceRoller.module.css\";\n\nconst DiceRoller = forwardRef<DiceRollerHandle, DiceRollerProps>(({\n  // Visual customization\n  diceColor = '#4a90e2',\n  numberColor = '#ffffff',\n  \n  // Die configuration\n  dieType: propDieType = 'd6',\n  predeterminedResult = null,\n  \n  // Size and display\n  width = 600,\n  height = 400,\n  dieSize = 1,\n  \n  // Callbacks\n  onResult,\n  onRollStart,\n  onRollEnd,\n  \n  // Optional features\n  showControls = false,\n  showResultDisplay = true,\n  throwForce: propThrowForce = 1.0,\n  autoRoll = true,\n}, ref) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const worldRef = useRef<CANNON.World | null>(null);\n  const dieBodyRef = useRef<CANNON.Body | null>(null);\n  const dieMeshRef = useRef<THREE.Mesh | null>(null);\n  const frameRef = useRef<number | undefined>(undefined);\n  const controlsRef = useRef<any>(null); // OrbitControls type\n  const materialsRef = useRef<THREE.Material[]>([]);\n  const baseMaterialsRef = useRef<THREE.Material[]>([]);\n  const currentFaceMappingRef = useRef<number[]>([]);\n  const diceMaterialRef = useRef<CANNON.Material | null>(null);\n  \n  const [lastResult, setLastResult] = useState<number | null>(null);\n  const [targetResult, setTargetResult] = useState<number | null>(predeterminedResult ?? null);\n  const [dieType, setDieType] = useState<DieType>(propDieType);\n  const [isRolling, setIsRolling] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [physicsParams, setPhysicsParams] = useState<PhysicsParams>(DEFAULT_PHYSICS);\n  const [worldReady, setWorldReady] = useState(false);\n  const [throwForce, setThrowForce] = useState<number>(propThrowForce);\n  const [internalDiceColor, setInternalDiceColor] = useState<string>(diceColor);\n  const [internalNumberColor, setInternalNumberColor] = useState<string>(numberColor);\n  const [diceSpawned, setDiceSpawned] = useState(false);\n  const stoppedFramesRef = useRef<number>(0);\n  const physicsParamsRef = useRef(physicsParams);\n  \n  // Sync props with internal state\n  useEffect(() => {\n    setTargetResult(predeterminedResult);\n  }, [predeterminedResult]);\n  \n  useEffect(() => {\n    setDieType(propDieType as DieType);\n  }, [propDieType]);\n  \n  useEffect(() => {\n    setThrowForce(propThrowForce);\n  }, [propThrowForce]);\n  \n  useEffect(() => {\n    setInternalDiceColor(diceColor);\n  }, [diceColor]);\n  \n  useEffect(() => {\n    setInternalNumberColor(numberColor);\n  }, [numberColor]);\n  \n  // Initialize scene\n  const initScene = useCallback(() => {\n    if (!mountRef.current) return;\n    \n    // Setup complete scene with all components\n    const { scene, camera, renderer, controls } = setupCompleteScene(\n      width,\n      height,\n      mountRef.current\n    );\n    \n    // Store references\n    sceneRef.current = scene;\n    cameraRef.current = camera;\n    rendererRef.current = renderer;\n    controlsRef.current = controls;\n    \n    // Physics world - use shared setup with DEFAULT_PHYSICS as default\n    // We'll update the physics params separately in another effect\n    const physicsSetup = createPhysicsWorld(DEFAULT_PHYSICS);\n    worldRef.current = physicsSetup.world;\n    diceMaterialRef.current = physicsSetup.diceMaterial;\n    \n    setIsInitialized(true);\n    setWorldReady(true);\n  }, [width, height]); // Remove physicsParams dependency!\n  \n  // Create die\n  const createDie = useCallback(() => {\n    if (!sceneRef.current || !worldRef.current) return;\n    \n    // Remove existing die\n    if (dieMeshRef.current) {\n      sceneRef.current.remove(dieMeshRef.current);\n      dieMeshRef.current.geometry.dispose();\n      if (Array.isArray(dieMeshRef.current.material)) {\n        dieMeshRef.current.material.forEach(m => {\n          if (m && m.dispose) m.dispose();\n        });\n      } else if (dieMeshRef.current.material && dieMeshRef.current.material.dispose) {\n        dieMeshRef.current.material.dispose();\n      }\n    }\n    if (dieBodyRef.current) {\n      worldRef.current.removeBody(dieBodyRef.current);\n    }\n    \n    let geometry: THREE.BufferGeometry;\n    let materials: THREE.Material[];\n    \n    if (dieType === 'd6') {\n      geometry = createD6Geometry(dieSize);\n      materials = createD6Materials(50, 0.9, internalDiceColor, internalNumberColor);\n      baseMaterialsRef.current = [...materials];\n      materialsRef.current = [...materials];\n      currentFaceMappingRef.current = DICE_CONFIGS.d6.defaultMapping;\n    } else if (dieType === 'd8') {\n      const d8Data = createD8(dieSize, internalDiceColor, internalNumberColor);\n      geometry = d8Data.geometry;\n      materials = [...d8Data.materials];\n      baseMaterialsRef.current = [...materials];\n      materialsRef.current = [...materials];\n      currentFaceMappingRef.current = DICE_CONFIGS.d8.defaultMapping;\n    } else {\n      const d20Data = createD20(dieSize, internalDiceColor, internalNumberColor);\n      geometry = d20Data.geometry;\n      materials = [...d20Data.materials];\n      baseMaterialsRef.current = [...materials];\n      materialsRef.current = [...materials];\n      currentFaceMappingRef.current = DICE_CONFIGS.d20.defaultMapping;\n    }\n    \n    // Create physics body using shared function with current physics params\n    const dieBody = createDieBody(dieType, dieSize, diceMaterialRef.current!, physicsParamsRef.current);\n    \n    // Create mesh\n    const mesh = new THREE.Mesh(geometry, materials);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    \n    // Store references but don't add to scene yet\n    dieMeshRef.current = mesh;\n    dieBodyRef.current = dieBody;\n    \n    // Only add to scene if autoRoll is true\n    if (autoRoll) {\n      sceneRef.current.add(mesh);\n      dieBody.position.set(...THROW_CONFIG.startPosition);\n      dieBody.quaternion.setFromEuler(\n        Math.random() * Math.PI,\n        Math.random() * Math.PI,\n        Math.random() * Math.PI\n      );\n      worldRef.current.addBody(dieBody);\n      setDiceSpawned(true);\n    }\n  }, [dieType, dieSize, internalDiceColor, internalNumberColor, autoRoll]); // Use internal color state\n  \n  // Detect face value\n  const detectFaceValue = useCallback(() => {\n    if (!dieMeshRef.current) return -1;\n    \n    return detectMeshFaceValue(\n      dieMeshRef.current,\n      dieType,\n      currentFaceMappingRef.current\n    );\n  }, [dieType]);\n  \n  // Handle throw\n  const throwDie = useCallback(() => {\n    if (!dieBodyRef.current || !dieMeshRef.current || isRolling || !sceneRef.current || !worldRef.current) return;\n    \n    // If dice hasn't been spawned yet, add it to the scene\n    if (!diceSpawned) {\n      sceneRef.current.add(dieMeshRef.current);\n      worldRef.current.addBody(dieBodyRef.current);\n      setDiceSpawned(true);\n    }\n    \n    setIsRolling(true);\n    stoppedFramesRef.current = 0;\n    if (onRollStart) onRollStart();\n    \n    // Generate throw parameters with current throw force\n    // Use bottom-right throw when dice wasn't already spawned (external trigger)\n    const params = !autoRoll || !diceSpawned ? generateBottomRightThrowParams(throwForce) : generateThrowParams(throwForce);\n    \n    // Handle predetermined result\n    const desiredResult = targetResult;\n    const maxValue = DICE_CONFIGS[dieType].faces;\n    if (desiredResult && desiredResult >= 1 && desiredResult <= maxValue) {\n      // Run simulation with current physics params\n      const predictedResult = simulateThrow(params, dieSize, dieType, physicsParamsRef.current);\n      \n      if (predictedResult > 0 && predictedResult !== desiredResult) {\n        // Calculate and apply material shift\n        const shiftResult = calculateMaterialShift(\n          predictedResult,\n          desiredResult,\n          baseMaterialsRef.current,\n          dieType\n        );\n        \n        if (shiftResult) {\n          materialsRef.current = shiftResult.shiftedMaterials;\n          currentFaceMappingRef.current = shiftResult.newFaceMapping;\n          dieMeshRef.current.material = shiftResult.shiftedMaterials;\n        }\n      } else {\n        // Reset to base materials and default mapping\n        materialsRef.current = [...baseMaterialsRef.current];\n        currentFaceMappingRef.current = resetMaterials(\n          dieMeshRef.current,\n          baseMaterialsRef.current,\n          dieType\n        );\n      }\n    } else {\n      // Random roll - use base materials and default mapping\n      materialsRef.current = [...baseMaterialsRef.current];\n      currentFaceMappingRef.current = resetMaterials(\n        dieMeshRef.current,\n        baseMaterialsRef.current,\n        dieType\n      );\n    }\n    \n    // Apply throw physics\n    dieBodyRef.current.position.set(...params.position);\n    dieBodyRef.current.quaternion.setFromEuler(...params.rotation);\n    dieBodyRef.current.velocity.set(...params.velocity);\n    dieBodyRef.current.angularVelocity.set(...params.angularVelocity);\n  }, [isRolling, targetResult, dieType, dieSize, throwForce, onRollStart, diceSpawned, autoRoll]);\n  \n  // Expose roll method via ref\n  useImperativeHandle(ref, () => ({\n    roll: throwDie\n  }), [throwDie]);\n  \n  // Animation loop\n  const animate = useCallback(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current || !worldRef.current) return;\n    \n    // Update physics\n    worldRef.current.step(PHYSICS_SIM_CONFIG.timeStep);\n    \n    // Sync mesh to physics\n    if (dieBodyRef.current && dieMeshRef.current) {\n      // Copy position\n      dieMeshRef.current.position.set(\n        dieBodyRef.current.position.x,\n        dieBodyRef.current.position.y,\n        dieBodyRef.current.position.z\n      );\n      \n      // Copy quaternion\n      dieMeshRef.current.quaternion.set(\n        dieBodyRef.current.quaternion.x,\n        dieBodyRef.current.quaternion.y,\n        dieBodyRef.current.quaternion.z,\n        dieBodyRef.current.quaternion.w\n      );\n      \n      // Check if die has fallen off the table or through the floor\n      if (Math.abs(dieMeshRef.current.position.x) > ANIMATION_CONFIG.fallOffTableThreshold || \n          Math.abs(dieMeshRef.current.position.z) > ANIMATION_CONFIG.fallOffTableThreshold || \n          dieMeshRef.current.position.y < ANIMATION_CONFIG.fallThroughFloorY) {\n        // Reset die position\n        dieBodyRef.current.position.set(...THROW_CONFIG.startPosition);\n        dieBodyRef.current.velocity.set(0, 0, 0);\n        dieBodyRef.current.angularVelocity.set(0, 0, 0);\n        setIsRolling(false);\n      }\n      \n      // Check if stopped\n      if (isRolling) {\n        const v = dieBodyRef.current.velocity;\n        const av = dieBodyRef.current.angularVelocity;\n        const speed = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n        const angSpeed = Math.sqrt(av.x * av.x + av.y * av.y + av.z * av.z);\n        \n        // Use stricter threshold for D20\n        const threshold = dieType === 'd20' ? PHYSICS_SIM_CONFIG.linearThresholdD20 : PHYSICS_SIM_CONFIG.linearThreshold;\n        \n        if (speed < threshold && angSpeed < threshold) {\n          stoppedFramesRef.current++;\n          \n          // Must be stopped for required frames to ensure die won't tip\n          if (stoppedFramesRef.current >= PHYSICS_SIM_CONFIG.stoppedFramesRequired) {\n            setIsRolling(false);\n            stoppedFramesRef.current = 0;\n            \n            setTimeout(() => {\n              const result = detectFaceValue();\n              if (result > 0) {\n                setLastResult(result);\n                if (onResult) onResult(result);\n              }\n              if (onRollEnd) onRollEnd();\n            }, ANIMATION_CONFIG.resultDelay);\n          }\n        } else {\n          stoppedFramesRef.current = 0;\n        }\n      }\n    }\n    \n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n    \n    // Render\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n    frameRef.current = requestAnimationFrame(animate);\n  }, [isRolling, detectFaceValue, onResult, onRollEnd, dieType]);\n  \n  // Initialize\n  useEffect(() => {\n    initScene();\n    \n    return () => {\n      const frame = frameRef.current;\n      const renderer = rendererRef.current;\n      const mount = mountRef.current;\n      \n      if (frame) {\n        cancelAnimationFrame(frame);\n      }\n      if (renderer && mount && mount.contains(renderer.domElement)) {\n        mount.removeChild(renderer.domElement);\n        renderer.dispose();\n      }\n    };\n  }, [initScene]);\n  \n  // Create die when world is ready or die type changes\n  useEffect(() => {\n    if (worldReady) {\n      createDie();\n    }\n  }, [worldReady, dieType, createDie]);\n  \n  // Start animation\n  useEffect(() => {\n    if (isInitialized) {\n      animate();\n    }\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n    };\n  }, [isInitialized, animate]);\n  \n  // Update physics when params change AND world is ready\n  useEffect(() => {\n    // Only update if world is initialized\n    if (!worldReady || !worldRef.current) return;\n    \n    \n    // Update world gravity\n    worldRef.current.gravity.set(0, -physicsParams.gravity, 0);\n    \n    // Update die damping if it exists\n    if (dieBodyRef.current) {\n      dieBodyRef.current.linearDamping = physicsParams.linearDamping;\n      dieBodyRef.current.angularDamping = physicsParams.angularDamping;\n      \n      // Check if die has fallen through\n      if (dieBodyRef.current.position.y < ANIMATION_CONFIG.fallThroughFloorY) {\n        dieBodyRef.current.position.set(...THROW_CONFIG.startPosition);\n        dieBodyRef.current.velocity.set(0, 0, 0);\n        dieBodyRef.current.angularVelocity.set(0, 0, 0);\n      }\n    }\n    \n    // Get existing materials from the world\n    const diceMaterial = diceMaterialRef.current;\n    if (!diceMaterial) return;\n    \n    // Find ground and wall materials from existing bodies\n    let groundMaterial: CANNON.Material | null = null;\n    let wallMaterial: CANNON.Material | null = null;\n    \n    worldRef.current.bodies.forEach(body => {\n      if (body.material) {\n        const mat = body.material as CANNON.Material;\n        if (mat.name === 'ground') groundMaterial = mat;\n        if (mat.name === 'wall') wallMaterial = mat;\n      }\n    });\n    \n    // Clear existing contact materials\n    worldRef.current.contactmaterials = [];\n    \n    // Recreate contact materials with new values\n    if (groundMaterial) {\n      worldRef.current.addContactMaterial(new CANNON.ContactMaterial(\n        diceMaterial,\n        groundMaterial,\n        {\n          friction: physicsParams.diceFriction,\n          restitution: physicsParams.diceRestitution\n        }\n      ));\n    }\n    \n    if (wallMaterial) {\n      worldRef.current.addContactMaterial(new CANNON.ContactMaterial(\n        diceMaterial,\n        wallMaterial,\n        {\n          friction: physicsParams.wallFriction,\n          restitution: physicsParams.wallRestitution\n        }\n      ));\n    }\n    \n    // Dice-to-dice contact\n    worldRef.current.addContactMaterial(new CANNON.ContactMaterial(\n      diceMaterial,\n      diceMaterial,\n      {\n        friction: physicsParams.diceFriction,\n        restitution: physicsParams.diceRestitution\n      }\n    ));\n    \n  }, [physicsParams, worldReady, isRolling]);\n  \n  // Keep physics params ref in sync\n  useEffect(() => {\n    physicsParamsRef.current = physicsParams;\n  }, [physicsParams]);\n  \n  // Handle physics params change\n  const handlePhysicsChange = useCallback((newParams: PhysicsParams) => {\n    // Don't change physics while rolling\n    if (isRolling) {\n      alert(ERROR_MESSAGES.physicsWhileRolling);\n      return;\n    }\n    \n    // Update physics params state which will trigger a re-render\n    setPhysicsParams(newParams);\n  }, [isRolling]);\n\n  return (\n    <div className={styles.diceWrapper}>\n      <div className={styles.sceneContainer}>\n        <div className={styles.diceContainer} style={{ width, height }}>\n          <div \n            ref={mountRef} \n            style={{ width: '100%', height: '100%', cursor: 'pointer' }}\n            onClick={autoRoll ? throwDie : undefined}\n          />\n          \n          {showResultDisplay && (\n            <div style={{ position: \"absolute\", bottom: 20, left: 20, color: \"black\" }}>\n              <div>{autoRoll ? 'Click anywhere to roll the die!' : 'Waiting for roll...'}</div>\n              {lastResult && (\n                <div style={{ fontSize: \"24px\", marginTop: \"10px\" }}>\n                  Last roll: {lastResult}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {showControls && (\n        <div className={styles.controlsPanel}>\n        <div className={styles.controlsSection}>\n          <h3 style={{ color: UI_CONFIG.controlsHeading }}>Die Controls</h3>\n          \n          <div style={{ marginBottom: \"15px\" }}>\n            <div style={{ color: UI_CONFIG.controlsText, fontWeight: 'bold' }}>Throw Force:</div>\n            <div style={{ display: 'flex', alignItems: 'center', marginTop: '5px' }}>\n              <input\n                type=\"range\"\n                min={THROW_CONFIG.minForce}\n                max={THROW_CONFIG.maxForce}\n                step={THROW_CONFIG.forceStep}\n                value={throwForce}\n                onChange={(e) => setThrowForce(parseFloat(e.target.value))}\n                style={{ width: UI_CONFIG.sliderHeight }}\n              />\n              <span style={{ \n                marginLeft: '10px',\n                backgroundColor: UI_CONFIG.monospaceBg,\n                padding: '2px 8px',\n                borderRadius: '4px',\n                fontFamily: 'monospace',\n                color: UI_CONFIG.controlsText\n              }}>\n                {throwForce.toFixed(1)}x\n              </span>\n            </div>\n          </div>\n          \n          <div style={{ marginBottom: \"15px\" }}>\n            <div style={{ color: UI_CONFIG.controlsText, fontWeight: 'bold' }}>Die Type:</div>\n            <div style={{ display: \"flex\", gap: \"10px\", marginTop: \"5px\" }}>\n              <button \n                onClick={() => {\n                  setDieType('d6');\n                  setTargetResult(null);\n                }}\n                style={{\n                  backgroundColor: dieType === 'd6' ? UI_CONFIG.buttonPrimary : UI_CONFIG.inputBackground,\n                  color: dieType === 'd6' ? 'white' : 'black',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  padding: '5px 10px',\n                  cursor: 'pointer'\n                }}\n              >\n                D6\n              </button>\n              <button \n                onClick={() => {\n                  setDieType('d8');\n                  setTargetResult(null);\n                }}\n                style={{\n                  backgroundColor: dieType === 'd8' ? UI_CONFIG.buttonPrimary : UI_CONFIG.inputBackground,\n                  color: dieType === 'd8' ? 'white' : 'black',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  padding: '5px 10px',\n                  cursor: 'pointer'\n                }}\n              >\n                D8\n              </button>\n              <button \n                onClick={() => {\n                  setDieType('d20');\n                  setTargetResult(null);\n                }}\n                style={{\n                  backgroundColor: dieType === 'd20' ? UI_CONFIG.buttonPrimary : UI_CONFIG.inputBackground,\n                  color: dieType === 'd20' ? 'white' : 'black',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  padding: '5px 10px',\n                  cursor: 'pointer'\n                }}\n              >\n                D20\n              </button>\n            </div>\n          </div>\n          \n          <div>\n            <div style={{ color: UI_CONFIG.controlsText, fontWeight: 'bold' }}>Predetermined Result:</div>\n            <div style={{ display: \"flex\", gap: \"10px\", marginTop: \"5px\", flexWrap: \"wrap\" }}>\n              <button \n                onClick={() => setTargetResult(null)}\n                style={{\n                  backgroundColor: targetResult === null ? UI_CONFIG.buttonPrimary : UI_CONFIG.inputBackground,\n                  color: targetResult === null ? 'white' : 'black',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  padding: '5px 10px',\n                  cursor: 'pointer'\n                }}\n              >\n                Random\n              </button>\n              {Array.from({ length: dieType === 'd6' ? 6 : dieType === 'd8' ? 8 : 20 }, (_, i) => i + 1).map(num => (\n                <button \n                  key={num}\n                  onClick={() => setTargetResult(num)}\n                  style={{\n                    backgroundColor: targetResult === num ? UI_CONFIG.buttonPrimary : UI_CONFIG.inputBackground,\n                    color: targetResult === num ? 'white' : 'black',\n                    border: `1px solid ${UI_CONFIG.inputBorder}`,\n                    padding: '5px 10px',\n                    cursor: 'pointer',\n                    minWidth: '35px'\n                  }}\n                >\n                  {num}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        <div className={styles.controlsSection}>\n          <h3 style={{ color: UI_CONFIG.controlsHeading }}>Visual Settings</h3>\n          \n          <div style={{ marginBottom: \"15px\" }}>\n            <div style={{ color: UI_CONFIG.controlsText, fontWeight: 'bold' }}>Die Color:</div>\n            <div style={{ display: 'flex', alignItems: 'center', marginTop: '5px', gap: '10px' }}>\n              <input\n                type=\"color\"\n                value={internalDiceColor}\n                onChange={(e) => setInternalDiceColor(e.target.value)}\n                style={{ \n                  width: '50px', \n                  height: '30px',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                }}\n              />\n              <span style={{ \n                backgroundColor: UI_CONFIG.monospaceBg,\n                padding: '2px 8px',\n                borderRadius: '4px',\n                fontFamily: 'monospace',\n                color: UI_CONFIG.controlsText\n              }}>\n                {internalDiceColor}\n              </span>\n            </div>\n          </div>\n          \n          <div style={{ marginBottom: \"15px\" }}>\n            <div style={{ color: UI_CONFIG.controlsText, fontWeight: 'bold' }}>Number Color:</div>\n            <div style={{ display: 'flex', alignItems: 'center', marginTop: '5px', gap: '10px' }}>\n              <input\n                type=\"color\"\n                value={internalNumberColor}\n                onChange={(e) => setInternalNumberColor(e.target.value)}\n                style={{ \n                  width: '50px', \n                  height: '30px',\n                  border: `1px solid ${UI_CONFIG.inputBorder}`,\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                }}\n              />\n              <span style={{ \n                backgroundColor: UI_CONFIG.monospaceBg,\n                padding: '2px 8px',\n                borderRadius: '4px',\n                fontFamily: 'monospace',\n                color: UI_CONFIG.controlsText\n              }}>\n                {internalNumberColor}\n              </span>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => {\n              setInternalDiceColor('#4a90e2');\n              setInternalNumberColor('#ffffff');\n            }}\n            style={{\n              backgroundColor: UI_CONFIG.inputBackground,\n              color: UI_CONFIG.controlsText,\n              border: `1px solid ${UI_CONFIG.inputBorder}`,\n              padding: '5px 10px',\n              cursor: 'pointer',\n              borderRadius: '4px'\n            }}\n          >\n            Reset Colors\n          </button>\n        </div>\n        \n        <PhysicsControls \n          params={physicsParams}\n          onChange={handlePhysicsChange}\n        />\n        </div>\n      )}\n    </div>\n  );\n});\n\nDiceRoller.displayName = 'DiceRoller';\n\nexport default DiceRoller;"],"names":["self","jsxRuntimeModule","require$$0","require$$1","jsx","jsxs","__defProp","__defNormalProp","__publicField","Ray","Plane","Vector3","MOUSE","TOUCH","Quaternion","PerspectiveCamera","OrthographicCamera","Spherical","Vector2","BoxGeometry","calcTextureSize","createTextTexture","THREE","CANNON","forwardRef","useRef","useState","useEffect","useCallback","useImperativeHandle"],"mappings":"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","x_google_ignoreList":[0,1,2,5,6,7]}